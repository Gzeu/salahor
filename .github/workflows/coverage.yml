name: Code Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: 20.x
  PNPM_VERSION: 8.x
  COVERAGE_THRESHOLD: 80

jobs:
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: true

      - name: Setup pnpm
        run: |
          echo "PNPM_HOME=$(pnpm env PNPM_HOME)" >> $GITHUB_ENV
          echo "$PNPM_HOME" >> $GITHUB_PATH
          pnpm --version

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        id: test-coverage
        run: pnpm test:coverage

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN != '' && secrets.CODECOV_TOKEN || github.token }}
          directory: coverage
          fail_ci_if_error: false
          verbose: true
          name: code-coverage
          files: |
            **/coverage/coverage-final.json
            !**/node_modules/**
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN || github.token }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            **/coverage/**
            !**/node_modules/**
          retention-days: 7

  coverage-check:
    name: Coverage Check
    needs: coverage
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./coverage

      - name: Check coverage
        run: |
          # Check if coverage report exists
          if [ ! -f "coverage/coverage-final.json" ]; then
            echo "::error::Coverage report not found"
            exit 1
          fi
          
          # Install jq for JSON parsing
          sudo apt-get update
          sudo apt-get install -y jq bc
          
          # Parse coverage summary
          COVERAGE=$(jq -r '.total.lines.pct' coverage/coverage-final.json)
          echo "Current coverage: $COVERAGE%"
          
          # Compare with threshold
          if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "::error::Code coverage ($COVERAGE%) is below the required threshold of ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          else
            echo "âœ… Code coverage ($COVERAGE%) meets the required threshold of ${{ env.COVERAGE_THRESHOLD }}%"
          fi
        continue-on-error: false
        shell: bash
