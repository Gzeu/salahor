name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

env:
  PNPM_VERSION: 8.x
  NODE_VERSION: 20.x

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      pnpm-version: ${{ steps.pnpm-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV
          
      - name: Setup pnpm
        run: |
          echo "PNPM_HOME=$(pnpm env PNPM_HOME)" >> $GITHUB_ENV
          echo "$PNPM_HOME" >> $GITHUB_PATH

  lint:
    name: Lint
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run ESLint
        run: pnpm lint

  test:
    name: Test (Node ${{ matrix.node-version }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run tests
        run: pnpm test

  build:
    name: Build
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build all packages
        run: pnpm -r build

  release:
    name: Release
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'
      
      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build packages
        run: pnpm build

      - name: Create and publish versions
        uses: changesets/action@v1
        with:
          version: pnpm version
          commit: 'chore: release'
          title: 'Release v${version}'
          publish: pnpm -r publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN || '' }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN || '' }}

  deploy:
    name: Deploy WebSocket Server
    needs: release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r deploy/* deployment/
          cp package.json deployment/
          cp pnpm-lock.yaml deployment/
          cp -r node_modules deployment/
          tar -czf deployment.tar.gz deployment

      - name: Deploy to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deployment.tar.gz"
          target: "/tmp"

      - name: Run deployment script on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /tmp
            tar -xzf deployment.tar.gz
            cd deployment
            
            # Install production dependencies
            pnpm install --prod --frozen-lockfile
            
            # Create deployment directory
            DEPLOY_DIR="/opt/salahor/websocket-$(date +%Y%m%d%H%M%S)"
            sudo mkdir -p $DEPLOY_DIR
            
            # Copy files
            sudo cp -r . $DEPLOY_DIR
            
            # Create symlink to current deployment
            CURRENT_LINK="/opt/salahor/current"
            sudo rm -f $CURRENT_LINK
            sudo ln -s $DEPLOY_DIR $CURRENT_LINK
            
            # Install systemd service file
            sudo cp salahor-websocket.service /etc/systemd/system/

            # Restart service if running, otherwise start it
            if systemctl is-active --quiet salahor-websocket; then
              sudo systemctl restart salahor-websocket
            else
              sudo systemctl daemon-reload
              sudo systemctl enable salahor-websocket
              sudo systemctl start salahor-websocket
            fi

            # Cleanup old deployments (keep last 5)
            if [ -d "/opt/salahor" ]; then
              ls -dt /opt/salahor/websocket-* 2>/dev/null | tail -n +6 | xargs -r sudo rm -rf
            fi

            # Verify service status
            if ! sudo systemctl is-active --quiet salahor-websocket; then
              echo "Error: WebSocket service is not running"
              exit 1
            fi

      - name: Verify deployment
        run: |
          echo "Deployment completed successfully!"
          echo "WebSocket server should be running at: ws://${{ secrets.SERVER_HOST }}:3000"
